Delegate: it is a type-safe function pointer

-A delegate holds the reference of a method and then calls the method for execution

if a method is static we will not add a delegate

if we want to create a delegate the return type and parameter should be the same as the method

delegate is a reference type
To call a method by using a delegate we have 3 steps:

1. Define a delegate

[<modifiers>] deligate type<name>([<parameter list>])

2. instance of delegate

we have to pass the method name as the parameter to the delegate constructor

3. Now call the delegate by passing the required parameter values, so that internally the method that is bound with the delegate gets executed



multicast delegate

it will store the reference of two or more methods

this delegate holds the reference of two method

if you call one delegate both the methods can be executed

if the methods have return type as int or non void then it will return the last method


anonymous methods

method which doesn't have a name it has only a body and contains a delegate keyword
no need of access modifier and return type 
main advantage is less typing work but we should not use Anonymous method everytime 
use only code volume are lesser
